{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b5a603f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a0e1a719",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array1 type: <class 'numpy.ndarray'>\n",
      "array1 array 형태: (3,)\n",
      "array2 형태: (2, 2)\n"
     ]
    }
   ],
   "source": [
    "array1 = np.array([1,2,3])\n",
    "print('array1 type:',type(array1))\n",
    "print('array1 array 형태:',array1.shape)\n",
    "array2 = np.array([[1,2],\n",
    "                  [4,5]])\n",
    "print('array2 형태:',array2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "126e9d7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 2. 3.] float64\n"
     ]
    }
   ],
   "source": [
    "array_int = np.array([1,2,3])\n",
    "array_float = array_int.astype('float64')\n",
    "print(array_float,array_float.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fa303284",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n",
      "[[0 0]\n",
      " [0 0]\n",
      " [0 0]]\n",
      "[[1 1]\n",
      " [1 1]\n",
      " [1 1]]\n"
     ]
    }
   ],
   "source": [
    "sequence_array = np.arange(10)\n",
    "print(sequence_array)\n",
    "zero_array = np.zeros((3,2),dtype = 'int32')\n",
    "print(zero_array)\n",
    "one_array = np.ones((3,2),dtype = 'int32')\n",
    "print(one_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d730b8ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array1:\n",
      " [0 1 2 3 4 5 6 7 8 9]\n",
      "[[0 1 2 3 4]\n",
      " [5 6 7 8 9]]\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(10)\n",
    "print('array1:\\n', array1)\n",
    "array2 = array1.reshape(2,5)\n",
    "print(array2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "24b9cb9f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n",
      "[[0 1 2 3 4]\n",
      " [5 6 7 8 9]]\n",
      "[[0 1]\n",
      " [2 3]\n",
      " [4 5]\n",
      " [6 7]\n",
      " [8 9]]\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(10)\n",
    "print(array1)\n",
    "array2 = array1.reshape(-1,5)\n",
    "print(array2)\n",
    "array3 = array1.reshape(5,-1)\n",
    "print(array3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f5038ea4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array3d:\n",
      " [[[0, 1], [2, 3]], [[4, 5], [6, 7]]]\n",
      "array5:\n",
      " [[0]\n",
      " [1]\n",
      " [2]\n",
      " [3]\n",
      " [4]\n",
      " [5]\n",
      " [6]\n",
      " [7]]\n",
      "array6:\n",
      " [[0]\n",
      " [1]\n",
      " [2]\n",
      " [3]\n",
      " [4]\n",
      " [5]\n",
      " [6]\n",
      " [7]]\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(8)\n",
    "array3d = array1.reshape((2,2,2))\n",
    "print('array3d:\\n',array3d.tolist())\n",
    "\n",
    "#3차원을 2차원으로\n",
    "array5 = array3d.reshape(-1,1)\n",
    "print('array5:\\n',array5)\n",
    "\n",
    "#1차원을 2차원으로\n",
    "array6 = array1.reshape(-1,1)\n",
    "print('array6:\\n',array6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "76f4a6e5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value: 3\n",
      "맨뒤의값: 9\n",
      "맨뒤에서 두번째 값: 8\n",
      "[10  2  3  4  5  6  7  8  0]\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(1,10)\n",
    "value = array1[2]\n",
    "print('value:',value)\n",
    "print('맨뒤의값:',array1[-1])\n",
    "print('맨뒤에서 두번째 값:',array1[-2])\n",
    "array1[0] = 10\n",
    "array1[8] = 0\n",
    "print(array1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "44d3da72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3 6]\n"
     ]
    }
   ],
   "source": [
    "array1d = np.arange(1,10)\n",
    "array2d = array1d.reshape(3,3)\n",
    "array3 = array2d[[0,1],2]\n",
    "print(array3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "ac9a5bda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6 7 8 9]\n",
      "[6 7 8 9]\n"
     ]
    }
   ],
   "source": [
    "array1 = np.arange(1,10)\n",
    "array3 = array1[array1>5]\n",
    "print(array3)\n",
    "array1 > 5\n",
    "\n",
    "boolean_indexs = np.array([False, False, False, False, False,  True,  True,  True,  True])\n",
    "array4 = array1 = array1[boolean_indexs]\n",
    "print(array4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "a1986b3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3 4 5 9]\n",
      "[9 5 4 3]\n"
     ]
    }
   ],
   "source": [
    "org_array = np.array([3,5,4,9])\n",
    "sort_array = np.sort(org_array)\n",
    "print(sort_array)\n",
    "sort_array_desc = np.sort(org_array)[::-1]\n",
    "print(sort_array_desc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "1fc9c168",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 7  1]\n",
      " [ 8 12]]\n",
      "[[ 8 12]\n",
      " [ 1  7]]\n"
     ]
    }
   ],
   "source": [
    "array2d = np.array([[8,12],[7,1]])\n",
    "sort_array2d_axis0 = np.sort(array2d,axis = 0)\n",
    "sort_array2d_axis1 = np.sort(array2d,axis = 1)\n",
    "\n",
    "print(sort_array2d_axis0)\n",
    "print(sort_array2d_axis1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9fffc9fc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 0 3 2]\n",
      "[2 3 0 1]\n"
     ]
    }
   ],
   "source": [
    "org_array = np.array([3,1,9,5])\n",
    "sort_indices = np.argsort(org_array)\n",
    "print(sort_indices)\n",
    "sort_indices_desc = np.argsort(org_array)[::-1]\n",
    "print(sort_indices_desc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "986a7a27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "성적 오름차순 정렬시: [0 2 4 1 3]\n",
      "성적 오름차순으로 이름 출력: ['Jon' 'Sarah' 'Samuel' 'Mike' 'Kate']\n"
     ]
    }
   ],
   "source": [
    "name_array=np.array(['Jon','Mike','Sarah','Kate','Samuel'])\n",
    "score_array=np.array([78,95,84,98,88])\n",
    "sort_indices_asc = np.argsort(score_array)\n",
    "\n",
    "print('성적 오름차순 정렬시:',sort_indices_asc)\n",
    "print('성적 오름차순으로 이름 출력:',name_array[sort_indices_asc])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
